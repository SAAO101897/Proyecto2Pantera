name: Deploy Full-Stack to EC2 Instances

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Aseg√∫rate de que aqu√≠ est√©n todas tus instancias.
        # Si tienes 4, deber√≠a ser [1, 2, 3, 4]
        instance: [1, 2, 3, 4] 

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to EC2 Instance ${{ matrix.instance }}
      env:
        HOST: ${{ secrets[format('EC2_HOST_{0}', matrix.instance)] }}
        USER: ${{ secrets[format('EC2_USER_{0}', matrix.instance)] }}
        KEY: ${{ secrets[format('EC2_SSH_KEY_{0}', matrix.instance)] }}
        ENV_BACKEND: ${{ secrets[format('ENV_FILE_BACKEND_{0}', matrix.instance)] }}
        ENV_FRONTEND: ${{ secrets[format('ENV_FILE_FRONTEND_{0}', matrix.instance)] }}
        # ¬°NUEVO! Leemos el secret con el nombre para esta instancia
        INSTANCE_NAME: ${{ secrets[format('NAME_{0}', matrix.instance)] }}
      run: |
        echo "üöÄ Iniciando despliegue en la instancia ${{ matrix.instance }}..."
        
        echo "$KEY" > deploy_key
        chmod 600 deploy_key

        # Combinamos el .env base del frontend con la nueva variable para el t√≠tulo
        FULL_FRONTEND_ENV="${ENV_FRONTEND}
        VITE_APP_TITLE=${INSTANCE_NAME}"
        
        # Usamos un Heredoc para pasar los comandos de forma m√°s segura y limpia
        ssh -o StrictHostKeyChecking=no -i deploy_key ${USER}@${HOST} bash -s -- <<EOF
          set -e # Terminar el script si un comando falla
          cd /opt/location-tracker
          
          # 1. Configurar git para evitar errores de ownership
          git config --global --add safe.directory /opt/location-tracker
          
          # 2. Actualizar el c√≥digo desde el repositorio
          echo 'üì¶ Actualizando c√≥digo desde Git...'
          git pull origin main
          
          # --- 3. Configurar y reiniciar el Backend (Python) ---
          echo '‚öôÔ∏è  Configurando Backend en Python...'
          cd backend
          # Crear .env para el backend
          echo "${ENV_BACKEND}" > .env
          # Instalar dependencias (asumiendo que tienes un venv)
          # Si no tienes venv, ajusta la ruta a pip
          /usr/bin/python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          deactivate
          # Reiniciar el proceso de PM2
          sudo pm2 restart location-backend
          
          # --- 4. Configurar y construir el Frontend ---
          echo 'üñ•Ô∏è  Configurando Frontend...'
          cd ../frontend
          # Crear .env del frontend con el t√≠tulo din√°mico
          echo "${FULL_FRONTEND_ENV}" > .env
          # Instalar dependencias y construir
          npm install
          npm run build
          
          # --- 5. Recargar Nginx ---
          echo 'üåê Recargando Nginx...'
          sudo nginx -t && sudo systemctl reload nginx
          
          echo "‚úÖ Despliegue completado exitosamente en la instancia ${{ matrix.instance }} con el t√≠tulo: ${INSTANCE_NAME}"
        EOF